# This GitHub Action builds the Docker image Promptfoo,
# runs the Docker container, performs a health check to ensure the application
# is running correctly, and then publishes the image to GitHub Container Registry
# if all checks pass. This action is triggered on release creation, workflow dispatch,
# pull requests to main that modify the Dockerfile, and pushes to main.

name: Test and Publish Multi-arch Docker Image
run-name: |
  ${{ github.event_name == 'release' && 'Release' ||
      github.event_name == 'workflow_dispatch' && 'Manual' ||
      github.event_name == 'pull_request' && 'PR' ||
      'Push' }}
  Docker build for ${{ github.ref_name }}
  ${{ github.event_name == 'pull_request' && format('(PR #{0})', github.event.number) || '' }}
  by @${{ github.actor }}

on:
  release:
    types: [created]
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  PROMPTFOO_REMOTE_API_BASE_URL: 'http://localhost:3400'
  PROMPTFOO_REMOTE_APP_BASE_URL: 'http://localhost:3400'

permissions:
  contents: read
  packages: write

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: local-test-image:latest
          platforms: linux/amd64

      - name: Run Docker container for testing
        run: docker run -d --name promptfoo-container -p 3400:3000 local-test-image:latest

      - name: Verify Python and promptfoo
        run: |
          echo "Checking Python version:"
          docker exec promptfoo-container python --version
          if [ $? -ne 0 ]; then
            echo "Python check failed"
            exit 1
          fi

          echo "Checking promptfoo version:"
          docker exec promptfoo-container promptfoo --version
          if [ $? -ne 0 ]; then
            echo "promptfoo check failed"
            exit 1
          fi

      - name: Run health check
        run: |
          # Loop to check if the server is up
          for i in {1..10}; do
            if curl -f http://localhost:3400/health; then
              echo -e "\nHealth check passed"
              HEALTH_CHECK_PASS=true
              break
            else
              echo "Health check failed, retrying in 2 seconds..."
              sleep 2
            fi
          done

          # If health check did not pass after retries, exit with an error
          if [ -z "$HEALTH_CHECK_PASS" ]; then
            echo -e "\nHealth check failed after multiple attempts" >&2
            exit 1
          fi
      - name: Run promptfoo evaluation
        uses: promptfoo/promptfoo-action@v1
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          config: '.github/promptfooconfig.yml'
      # - name: run promptfoo eval
      #   run: |
      #     pwd
      #     ls -al
      #     npm install
      #     npm run local -- eval -c .github/promptfooconfig.yml --share

      - name: Extract evalId and make curl request
        run: |
         # Extract evalId from the log
         eval_id=$(grep -oP 'evalId=\K[\w-]+' <(echo "${{ steps.your_previous_step.outputs.console_output }}"))
    
         # Check if evalId was found
         if [ -z "$eval_id" ]; then
           echo "Failed to extract evalId"
           exit 1
         fi
    
         echo "Extracted evalId: $eval_id"
    
         # Make the curl request and store the HTTP status code
         status_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3400/api/results/${eval_id}")
    
         # Check if the request was successful
         if [ "$status_code" -eq 200 ]; then
           echo "Curl request successful with status code 200."
         else
           echo "Curl request failed with status code $status_code."
           exit 1
         fi

      - name: Stop and remove Docker container
        if: always()
        run: |
          docker stop promptfoo-container
          docker rm promptfoo-container

